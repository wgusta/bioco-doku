{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Willkommen bei der Dokumentation f\u00fcr bioco.ch","text":"<p>Diese Dokumentation ist Ihr zentrales Nachschlagewerk f\u00fcr die Verwaltung und Weiterentwicklung der Bioco-Webseite.</p> <p>Sie ist in zwei Hauptbereiche unterteilt, je nachdem, was Sie tun m\u00f6chten:</p> <p>F\u00fcr Redakteure &amp; das Bioco-Team</p> <p>Wenn Sie Inhalte auf der Webseite bearbeiten, einen neuen Blog-Beitrag schreiben, Bilder hochladen oder wissen m\u00f6chten, wer wof\u00fcr zust\u00e4ndig ist, ist dies Ihr Bereich.</p> <ul> <li>Zur Anleitung f\u00fcr Redakteure</li> <li>Zum Styleguide (Farben, Schriften)</li> <li>Zur Governance (Zust\u00e4ndigkeiten)</li> </ul> <p>F\u00fcr Techniker &amp; Entwickler</p> <p>Wenn Sie die Webseite technisch aufsetzen, serverseitige \u00c4nderungen vornehmen oder die Dokumentations-Seite selbst aktualisieren m\u00fcssen, ist dies Ihr Bereich.</p> <ul> <li>Zur Server-Setup-Anleitung (ProcessWire)</li> <li>Zur Doku-Setup-Anleitung (MkDocs)</li> </ul>"},{"location":"anleitung-redakteure/","title":"Anleitung f\u00fcr Redakteure: Inhalte auf bioco.ch bearbeiten","text":"<p>Willkommen! Diese Anleitung hilft Ihnen, Inhalte auf der Webseite <code>bioco.ch</code> selbstst\u00e4ndig zu \u00e4ndern. Sie ben\u00f6tigen daf\u00fcr keine Programmierkenntnisse.</p> <p>Die Webseite wird mit einem System namens ProcessWire verwaltet. ProcessWire ist wie das \"B\u00fcro\" hinter der Webseite, in dem alle Texte und Bilder sortiert sind.</p>"},{"location":"anleitung-redakteure/#1-wie-melde-ich-mich-an","title":"1. Wie melde ich mich an?","text":"<p>Um Inhalte zu bearbeiten, m\u00fcssen Sie sich im \"B\u00fcro\" (dem Admin-Bereich) anmelden.</p> <ol> <li>\u00d6ffnen Sie in Ihrem Browser die Anmelde-Seite. (Der Link wird Ihnen vom technischen Administrator mitgeteilt, er lautet meist <code>https://www.bioco.ch/processwire/</code>).</li> <li>Geben Sie Ihren Benutzernamen und Ihr Passwort ein.</li> <li>Klicken Sie auf \"Anmelden\".</li> </ol>"},{"location":"anleitung-redakteure/#2-wie-finde-ich-eine-seite","title":"2. Wie finde ich eine Seite?","text":"<p>Nach dem Login sehen Sie auf der linken Seite einen \"Seitenbaum\". Dieser Baum ist das Inhaltsverzeichnis Ihrer Webseite und spiegelt die Navigation wider, die wir in unseren Chats definiert haben.</p> <ul> <li>Start</li> <li>Angebot</li> <li>Mitmachen</li> <li>\u00dcber uns</li> <li>Kontakt</li> </ul> <p>Wenn Sie den Text auf der \"\u00dcber uns\"-Seite \u00e4ndern m\u00f6chten: 1.  Klicken Sie im Seitenbaum auf \"\u00dcber uns\". 2.  Die Seite l\u00e4dt neu und zeigt Ihnen nun in der Mitte alle Text- und Bildfelder, die zu dieser Seite geh\u00f6ren.</p>"},{"location":"anleitung-redakteure/#3-wie-bearbeite-ich-einen-text","title":"3. Wie bearbeite ich einen Text?","text":"<ol> <li>Nachdem Sie eine Seite ausgew\u00e4hlt haben (z.B. \"\u00dcber uns\"), sehen Sie Felder wie \"\u00dcberschrift\" oder \"Textinhalt\".</li> <li>Klicken Sie in das Feld, das Sie bearbeiten m\u00f6chten.</li> <li>Schreiben oder \u00e4ndern Sie den Text.</li> <li>Klicken Sie ganz oben oder ganz unten auf die blaue Schaltfl\u00e4che \"Speichern\".</li> </ol> <p>Der Inhalt ist sofort live auf der Webseite sichtbar.</p>"},{"location":"anleitung-redakteure/#4-was-sind-blocke-oder-module","title":"4. Was sind \"Bl\u00f6cke\" oder \"Module\"?","text":"<p>Um die Seite flexibel zu halten, verwenden wir oft \"Inhaltsbl\u00f6cke\" (in ProcessWire oft \"Repeater\" oder \"PageTable\" genannt). Sie k\u00f6nnen sich das wie Lego-Bausteine vorstellen.</p> <p>In unseren Vorgespr\u00e4chen haben wir diese Bl\u00f6cke definiert (z.B. \"Hero-Sektion\", \"Text mit Bild\", \"Kontaktmodul\").</p> <p>Wenn Sie eine Seite bearbeiten, sehen Sie m\u00f6glicherweise eine Schaltfl\u00e4che \"Neuen Block hinzuf\u00fcgen\". Dort k\u00f6nnen Sie ausw\u00e4hlen, welche Art von Inhalt Sie einf\u00fcgen m\u00f6chten (z.B. ein reines Text-Modul oder ein Bilder-Modul).</p>"},{"location":"technical_setup_doku/","title":"Vollst\u00e4ndige Setup-Anleitung: Doku-Seite (MkDocs)","text":"<p>Dies ist der \"Bauplan\" f\u00fcr das <code>bioco-doku</code>-Projekt. Er dokumentiert den automatisierten \"Git-First\"-Workflow f\u00fcr die Doku-Seite <code>docs.bioco.ch</code>.</p> <p>Das Ziel: Ein extrem einfacher Workflow, der keine Server-Uploads per FTP oder File Manager erfordert. 1.  \u00c4nderungen lokal auf dem PC im <code>bioco-doku</code>-Ordner vornehmen. 2.  Mit GitHub Desktop \"committen\" und \"pushen\". 3.  GitHub Actions (ein Roboter) baut die Seite automatisch neu und ver\u00f6ffentlicht sie live.</p>"},{"location":"technical_setup_doku/#phase-1-lokales-setup-dein-pc","title":"Phase 1: Lokales Setup (Dein PC) \ud83d\udcbb","text":"<p>Alle diese Schritte passieren auf deinem lokalen Computer und m\u00fcssen nur einmal durchgef\u00fchrt werden.</p> <p>=== \"Schritt 1: Werkzeuge installieren (Terminal)\"</p> <pre><code>Wir ben\u00f6tigen `pip3` (den Python-Installer), um MkDocs und das Theme zu installieren.\n(Falls `pip3` nicht gefunden wird, muss `xcode-select --install` ausgef\u00fchrt werden, um die Apple Command Line Tools zu installieren.)\n\n```bash\n# 1. Installiert MkDocs\npip3 install mkdocs\n\n# 2. Installiert das \"Material\" Design-Theme\npip3 install mkdocs-material\n```\n</code></pre> <p>=== \"Schritt 2-3: Projekt klonen &amp; initialisieren\"</p> <pre><code>2.  **GitHub-Repo klonen:**\n    * Erstelle ein neues, **\u00f6ffentliches** (Public) Repository auf GitHub.com. Name: `bioco-doku`.\n    * Klone dieses leere Repo mit **GitHub Desktop** auf deinen PC (z.B. in `~/Projekte/bioco-doku`).\n3.  **MkDocs-Projekt initialisieren (Terminal):**\n    * Navigiere im Terminal *in* deinen leeren `bioco-doku`-Ordner: `cd ~/Projekte/bioco-doku`\n    * F\u00fchre `mkdocs new .` aus (mit dem Punkt), um die Dateien im aktuellen Ordner zu erstellen:\n    ```bash\n    mkdocs new .\n    ```\n* Dein Ordner enth\u00e4lt jetzt `mkdocs.yml` und `docs/`.\n</code></pre> <p>=== \"Schritt 4A: <code>mkdocs.yml</code> (Haupt-Konfig)\"</p> <pre><code>Ersetze den Inhalt der `mkdocs.yml` mit dieser Konfiguration (oder der oben angepassten Version):\n\n```yaml\nsite_name: Bioco Web-Projekt Doku\nsite_url: [https://docs.bioco.ch/](https://docs.bioco.ch/)\ntheme:\n  name: material\n  language: de\n  logo: assets/logo.png\n# ... (Rest der Konfiguration siehe Datei 'mkdocs.yml' oben) ...\nnav:\n  - Start: index.md\n  # ... (Rest der Navigation siehe Datei 'mkdocs.yml' oben) ...\n```\n</code></pre> <p>=== \"Schritt 4B: <code>.gitignore</code> (Ignorierliste)\"</p> <pre><code>Erstelle eine `.gitignore`-Datei und f\u00fcge hinzu:\n\n```text\nsite/\n```\n</code></pre> <p>=== \"Schritt 4C: <code>requirements.txt</code> (Werkzeugliste)\"</p> <pre><code>Erstelle eine `requirements.txt`-Datei und f\u00fcge hinzu:\n\n```text\nmkdocs\nmkdocs-material\n```\n</code></pre> <p>=== \"Schritt 4D: <code>.github/workflows/deploy.yml</code> (Roboter)\"</p> <pre><code>Erstelle den Ordner `.github`, darin den Ordner `workflows`. Erstelle *darin* die Datei `deploy.yml` und f\u00fcge diesen Code ein:\n\n```yaml\nname: Deploy MkDocs to GitHub Pages\non:\n  push:\n    branches:\n      - main  # oder 'master', je nach Haupt-Branch\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: '3.10'\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n      - name: Deploy\n        run: mkdocs gh-deploy --force --clean\n```\n</code></pre>"},{"location":"technical_setup_doku/#phase-2-github-konfiguration-website","title":"Phase 2: GitHub-Konfiguration (Website) \ud83c\udf10","text":"<p>Diese Schritte sind nur einmal auf GitHub.com n\u00f6tig.</p> <ol> <li>Code hochladen (GitHub Desktop):<ul> <li>\u00d6ffne GitHub Desktop. Alle neuen Dateien sind sichtbar.</li> <li>Schreibe eine Commit-Nachricht (z.B. \"Initiales Doku-Setup mit Actions\").</li> <li>Klicke \"Commit to main\" und dann \"Push origin\".</li> </ul> </li> <li>Schreibrechte f\u00fcr die Action geben:<ul> <li>Die erste Action wird fehlschlagen! Wir m\u00fcssen ihr Schreibrechte geben.</li> <li>Gehe auf GitHub.com zum <code>bioco-doku</code>-Repo -&gt; \"Settings\".</li> <li>Klicke links auf \"Actions\" -&gt; \"General\".</li> <li>Scrolle runter zu \"Workflow permissions\".</li> <li>W\u00e4hle \"Read and write permissions\" und klicke \"Save\".</li> </ul> </li> <li>Action erneut starten:<ul> <li>Gehe zum \"Actions\"-Tab.</li> <li>Klicke auf den fehlgeschlagenen (roten) Workflow.</li> <li>Klicke oben rechts auf \"Re-run jobs\".</li> <li>Warte, bis der Job gr\u00fcn (erfolgreich) ist. Er erstellt jetzt einen neuen Branch <code>gh-pages</code>.</li> </ul> </li> <li>GitHub Pages aktivieren:<ul> <li>Gehe zur\u00fcck zu \"Settings\" -&gt; \"Pages\".</li> <li>Source (Quelle): W\u00e4hle \"Deploy from a branch\".</li> <li>Branch: W\u00e4hle den neuen Branch <code>gh-pages</code> aus und klicke \"Save\".</li> </ul> </li> <li>Domain verbinden:<ul> <li>Trage im Feld \"Custom domain\" deine Domain ein: <code>docs.bioco.ch</code></li> <li>Klicke \"Save\".</li> </ul> </li> </ol>"},{"location":"technical_setup_doku/#phase-3-server-konfiguration-cpanel-dns","title":"Phase 3: Server-Konfiguration (cPanel DNS) \ud83d\udce1","text":"<p>Kein Terminal, kein File Manager</p> <p>F\u00fcr die Doku-Seite brauchen wir keinen SSH-Zugriff, kein Terminal und keinen File Manager auf dem Server. Die einzige Aktion findet im DNS-Editor statt.</p> <ol> <li>DNS-Zone \u00f6ffnen:<ul> <li>Gehe im cPanel zu \"Domains\" -&gt; \"Zone Editor\".</li> <li>Klicke bei <code>bioco.ch</code> auf \"Manage\" (Verwalten).</li> </ul> </li> <li>Alte Eintr\u00e4ge l\u00f6schen:<ul> <li>L\u00f6sche alle Eintr\u00e4ge, die <code>docs.bioco.ch</code> im Namen haben (Typ A, TXT, SRV etc.), die cPanel automatisch erstellt hat.</li> </ul> </li> <li>Neuen CNAME-Eintrag erstellen:<ul> <li>Klicke \"+ Add Record\" und erstelle diesen einen Eintrag:</li> <li>Name: <code>docs</code></li> <li>Type: <code>CNAME</code></li> <li>Record (Ziel): <code>\"DEIN-GITHUB-KONTO\".github.io</code></li> <li>Klicke \"Save Record\".</li> </ul> </li> </ol>"},{"location":"technical_setup_doku/#phase-4-dein-workflow-tagliche-arbeit","title":"Phase 4: Dein Workflow (T\u00e4gliche Arbeit) \u270d\ufe0f","text":"<p>Ab jetzt ist dein Workflow f\u00fcr die Doku extrem einfach:</p> <ol> <li>\u00d6ffne den <code>bioco-doku</code>-Ordner auf deinem PC.</li> <li>Bearbeite die <code>.md</code>-Dateien im <code>docs/</code>-Verzeichnis.</li> <li>Starte <code>mkdocs serve</code> im Terminal, um eine Live-Vorschau unter <code>http://127.0.0.1:8000</code> zu sehen (optional).</li> <li>Wenn du fertig bist: \u00d6ffne GitHub Desktop.</li> <li>Schreibe eine Commit-Nachricht (z.B. \"Governance-Seite aktualisiert\").</li> <li>Klicke \"Commit to main\" und dann \"Push origin\".</li> <li>Warte 1-2 Minuten. Die GitHub Action baut die Seite neu. <code>https://docs.bioco.ch</code> ist automatisch auf dem neuesten Stand.</li> </ol>"},{"location":"technical_setup_processwire/","title":"Vollst\u00e4ndige Setup-Anleitung: ProcessWire Website","text":"<p>Dies ist der \"Bauplan\" f\u00fcr das <code>bioco-web-project</code>. Er dokumentiert den gesamten Prozess vom leeren Server bis zu einer funktionierenden Staging- und Live-Umgebung, die mit Git verbunden ist.</p> <p>Das Ziel: Ein professioneller \"Git-First\"-Workflow. * Lokal (PC): Wir schreiben Code auf unserem Computer. * GitHub (Rezeptbuch): Wir speichern den Code in einem zentralen Lager. * Server (K\u00fcche): Der Server holt sich den Code von GitHub, um die Website anzuzeigen.</p> <p>Die Umgebungen: * <code>develop</code> (GitHub-Branch) -&gt; <code>staging.bioco.ch</code> (Testk\u00fcche) * <code>main</code> (GitHub-Branch) -&gt; <code>www.bioco.ch</code> (Live-Restaurant)</p>"},{"location":"technical_setup_processwire/#phase-1-vorbereitung-lokal-github","title":"Phase 1: Vorbereitung (Lokal &amp; GitHub) \ud83e\udde0","text":"<p>Zuerst bereiten wir den Code (das \"Rezept\") auf unserem PC und in unserem \"Rezeptbuch\" (GitHub) vor.</p> <p>=== \"Schritt 1-3: Repo und ProcessWire holen\"</p> <pre><code>1.  **GitHub-Repo erstellen:**\n    * Erstelle ein neues, **privates** Repository auf GitHub.com.\n    * Name: `bioco-web-project`.\n2.  **Branches erstellen:**\n    * Erstelle im Repo einen `develop`-Branch (basierend auf `main`).\n3.  **ProcessWire-Dateien lokal holen:**\n    * Erstelle einen leeren Ordner `bioco-web-project` auf deinem PC.\n    * Klone das leere GitHub-Repo mit **GitHub Desktop** in diesen Ordner.\n    * Lade die ProcessWire-ZIP-Datei von [processwire.com](https://processwire.com/) herunter.\n    * Entpacke die ZIP. Kopiere **alle** Dateien (`index.php`, `wire/`, `site-blank/` etc.) in deinen lokalen `bioco-web-project`-Ordner.\n    * Benenne den Ordner `site-blank` sofort in `site` um.\n</code></pre> <p>=== \"Schritt 4: .gitignore erstellen\"</p> <pre><code>Erstelle im `bioco-web-project`-Ordner eine neue Datei namens `.gitignore`. F\u00fcge diesen Inhalt ein, um sensible Dateien zu ignorieren:\n\n```text\n# ProcessWire sensible/generierte Dateien\n/site/config.php\n/site/assets/\n/site/templates/cache/\n/site/templates/logs/\n/site/templates/sessions/\n/site/templates/backups/\n\n# OS-Dateien\n.DS_Store\nThumbs.db\n```\n</code></pre> <p>=== \"Schritt 5: Code zu GitHub pushen\"</p> <pre><code>1.  \u00d6ffne GitHub Desktop. Du siehst alle neuen PW-Dateien.\n2.  Schreibe eine Commit-Nachricht (z.B. \"Initial ProcessWire core files\").\n3.  **Commite** die \u00c4nderungen.\n4.  **Pushe** die \u00c4nderungen (`Push origin`).\n5.  Wechsle in GitHub Desktop zum `develop`-Branch (`Current Branch` -&gt; `develop`) und stelle sicher, dass er auch gepusht wird.\n</code></pre>"},{"location":"technical_setup_processwire/#phase-2-server-vorbereitung-cpanel","title":"Phase 2: Server-Vorbereitung (cPanel) \ud83d\udd27","text":"<p>Jetzt bereiten wir die \"K\u00fcche\" (Novatrend-Server) vor.</p> <ol> <li> <p>Datenbanken &amp; Benutzer erstellen:</p> <ul> <li>Gehe zu \"MySQL\u00ae-Datenbanken\".</li> <li>Erstelle 3 Datenbanken: <code>bioco_live</code>, <code>bioco_staging</code>, <code>bioco_matomo</code>.</li> <li>Erstelle 1 Benutzer: <code>bioco_DEIN-DB-BENUTZER</code> (ANONYMISIERT).</li> <li>Weise <code>bioco_DEIN-DB-BENUTZER</code> \"ALLE RECHTE\" (ALL PRIVILEGES) f\u00fcr alle 3 Datenbanken zu.</li> <li>(Screenshot <code>Bildschirmfoto 2025-10-23 um 08.32.19.png</code> entfernt. Beschreibung: In der cPanel-\u00dcbersicht \"Aktuelle Datenbanken\" sollte nun der Benutzer mit Rechten f\u00fcr alle drei Datenbanken aufgef\u00fchrt sein.)</li> </ul> </li> <li> <p>Staging-Subdomain erstellen:</p> <ul> <li>Gehe zu \"Subdomains\".</li> <li>Erstelle <code>staging.bioco.ch</code>.</li> <li>Notiere den Pfad: <code>public_html/bioco_staging</code>.</li> </ul> </li> </ol>"},{"location":"technical_setup_processwire/#phase-3-der-cpanel-ssh-hack-der-spezialschlussel","title":"Phase 3: Der cPanel-SSH-Hack (Der Spezialschl\u00fcssel) \ud83d\udd11","text":"<p>Das ist der wichtigste und komplizierteste Teil. Wir m\u00fcssen eine sichere Verbindung zwischen Server und GitHub herstellen.</p> <p>Das cPanel-Problem</p> <p>Die cPanel-UI (\"SSH Access\") zwingt uns, ein Passwort f\u00fcr SSH-Schl\u00fcssel zu verwenden. Das automatische Git-Tool (\"Git Version Control\") ben\u00f6tigt aber einen Schl\u00fcssel OHNE Passwort. Die Werkzeuge widersprechen sich. (Screenshot <code>Bildschirmfoto 2025-10-22 um 21.36.55.jpg</code> entfernt.)</p> <p>L\u00f6sung: Wir erstellen den Schl\u00fcssel manuell im Server-Terminal.</p> <p>=== \"Schritt 1-3: Schl\u00fcssel erstellen (Terminal)\"</p> <pre><code>1.  **Terminal \u00f6ffnen:** Gehe im cPanel zu \"Erweitert\" -&gt; **\"Terminal\"**.\n2.  **Aufr\u00e4umen:** L\u00f6sche alle kaputten Schl\u00fcssel-Reste (falls vorhanden).\n    ```bash\n    # (Dieser Befehl l\u00f6scht id_rsa, id_rsa.pub etc. im .ssh-Ordner Ihres Users)\n    rm /home/DEIN-CPANEL-USER/.ssh/id_rsa*\n    rm /home/DEIN-CPANEL-USER/.ssh/authorized_keys\n    ```\n3.  **Schl\u00fcssel OHNE Passwort erstellen:** F\u00fchre diesen Befehl aus, um einen neuen Schl\u00fcssel zu erstellen und das Passwort (`-N \"\"`) explizit leer zu lassen. (Pfad ANONYMISIERT)\n    ```bash\n    ssh-keygen -t rsa -b 2048 -f /home/DEIN-CPANEL-USER/.ssh/id_rsa -N \"\"\n    ```\n</code></pre> <p>=== \"Schritt 4-6: Schl\u00fcssel autorisieren (cPanel &amp; GitHub)\"</p> <pre><code>4.  **Schl\u00fcssel im cPanel \"autorisieren\":**\n    * Gehe zur UI \"Sicherheit\" -&gt; \"SSH Access\".\n    * Der neue Schl\u00fcssel `id_rsa` ist jetzt sichtbar. Klicke bei `id_rsa.pub` auf **\"Manage\"** -&gt; **\"Authorize\"**.\n5.  **Schl\u00fcssel zu GitHub hinzuf\u00fcgen:**\n    * Gehe zur\u00fcck ins **Terminal**.\n    * Zeige den \u00f6ffentlichen Schl\u00fcssel an: `cat /home/DEIN-CPANEL-USER/.ssh/id_rsa.pub` (Pfad ANONYMISIERT)\n    * Kopiere die gesamte Ausgabe (beginnt mit `ssh-rsa AAAA...`).\n    * Gehe zu **GitHub.com** -&gt; `bioco-web-project`-Repo -&gt; \"Settings\" -&gt; \"Deploy Keys\".\n    * Klicke \"Add deploy key\".\n    * **Title:** `Novatrend Server`\n    * **Key:** F\u00fcge den kopierten Schl\u00fcssel ein.\n    * **Haken setzen:** **\"Allow write access\"**.\n    * Klicke \"Add key\".\n6.  **Verbindung testen (Terminal):**\n    * Teste die Verbindung mit: (Pfad ANONYMISIERT)\n        `git ls-remote git@github.com:DEIN-GITHUB-KONTO/bioco-web-project.git`\n    * Antworte auf die `(yes/no)`-Frage mit `yes`.\n    * **Erfolg:** Du siehst eine Liste deiner Branches. Die Verbindung steht.\n</code></pre>"},{"location":"technical_setup_processwire/#phase-4-staging-seite-installieren-stagingbiococh","title":"Phase 4: Staging-Seite installieren (<code>staging.bioco.ch</code>) \ud83d\ude80","text":"<p>Jetzt bauen wir die Testk\u00fcche.</p> <p>=== \"Schritt 1-2: Code holen &amp; Branch wechseln (cPanel)\"</p> <pre><code>1.  **Code holen (Klonen):**\n    * Gehe im cPanel zu \"Dateien\" -&gt; **\"Git\u2122 Version Control\"**.\n    * Klicke **\"Create\"**.\n    * **Clone URL:** `git@github.com:DEIN-GITHUB-KONTO/bioco-web-project.git` (ANONYMISIERT)\n    * **Repository Path:** `public_html/bioco_staging`\n    * **Repository Name:** `Bioco Staging`\n    * Klicke \"Create\".\n2.  **Branch wechseln:**\n    * Gehe auf **\"Manage\"** f\u00fcr das \"Bioco Staging\"-Repo.\n    * \u00c4ndere den \"Checked-Out Branch\" auf **`develop`** und klicke \"Update\".\n</code></pre> <p>=== \"Schritt 3: Server-Fehlerbehebung (File Manager)\"</p> <pre><code>Wir m\u00fcssen jetzt 4 Dinge im \"File Manager\" reparieren:\n\n* **403-Fehler (Ordner):** Rechtsklick auf `public_html/bioco_staging` -&gt; \"Change Permissions\" -&gt; auf **`755`** setzen.\n* **403-Fehler (Datei):** Rechtsklick auf `public_html/bioco_staging/.htaccess` -&gt; \"Change Permissions\" -&gt; auf **`644`** setzen.\n* **Installer-Fehler:** Rechtsklick auf Ordner `public_html/bioco_staging/site` -&gt; \"Change Permissions\" -&gt; **Tempor\u00e4r auf `777`** setzen.\n* **PHP 7.4-Fehler:** Rechtsklick auf `public_html/bioco_staging/.htaccess` -&gt; **\"Edit\"**. F\u00fcge den PHP 8.2 Code-Block **ganz oben** ein:\n    ```apacheconfig\n    # BEGIN PHP 8.2 ERZWINGEN\n    &lt;IfModule mime_module&gt;\n      AddHandler application/x-httpd-ea-php82 .php .php8 .phtml\n    &lt;/IfModule&gt;\n    # END PHP 8.2 ERZWINGEN\n    ```\n</code></pre> <p>=== \"Schritt 4-5: Installation &amp; Aufr\u00e4umen\"</p> <pre><code>4.  **Installation (Browser):**\n    * \u00d6ffne `http://staging.bioco.ch` im Browser.\n    * Der Installer startet. (Screenshot `Bildschirmfoto 2025-10-23 um 08.25.54.jpg` entfernt. Beschreibung: Der ProcessWire-Installer sollte nun alle Pr\u00fcfungen als \"bestanden\" (gr\u00fcne Haken) anzeigen.)\n    * Gib die **Staging-Datenbankdaten** ein:\n        * DB Name: `bioco_staging`\n        * DB User: `bioco_DEIN-DB-BENUTZER` (ANONYMISIERT)\n        * DB Pass: (Dein Datenbank-Passwort)\n    * Folge dem Installer, erstelle deinen Admin-User und **SPEICHERE DAS PASSWORT**.\n5.  **Aufr\u00e4umen (Sicherheit):**\n    * Gehe zur\u00fcck in den \"File Manager\".\n    * Setze die Berechtigung des `.../bioco_staging/site`-Ordners von `777` zur\u00fcck auf **`755`**.\n</code></pre>"},{"location":"technical_setup_processwire/#phase-5-live-seite-installieren-wwwbiococh","title":"Phase 5: Live-Seite installieren (<code>www.bioco.ch</code>) \ud83c\udf7d\ufe0f","text":"<p>Wiederhole Phase 4 exakt, aber f\u00fcr die Live-Seite.</p> <ol> <li>Code holen (Klonen):<ul> <li>Vorbereitung: Verschiebe den <code>bioco_staging</code>-Ordner (und <code>matomo</code>) tempor\u00e4r aus <code>public_html</code> heraus (z.B. in einen <code>TEMP</code>-Ordner), damit <code>public_html</code> leer ist.</li> <li>Klone das Repo (wie in 4.1) in den Pfad: <code>public_html</code></li> <li>Name: <code>Bioco Live</code></li> <li>Branch: Bleibt auf <code>main</code> (Standard).</li> <li>Aufr\u00e4umen: Verschiebe <code>bioco_staging</code> (und <code>matomo</code>) zur\u00fcck in <code>public_html</code>.</li> </ul> </li> <li>Server-Fehlerbehebung:<ul> <li>F\u00fchre Schritt 4.3 (Permissions &amp; PHP) exakt so f\u00fcr <code>public_html</code> und <code>public_html/.htaccess</code> und <code>public_html/site</code> durch.</li> </ul> </li> <li>Installation (Browser):<ul> <li>\u00d6ffne <code>http://www.bioco.ch</code> im Browser.</li> <li>Gib die Live-Datenbankdaten ein:<ul> <li>DB Name: <code>bioco_live</code></li> <li>DB User: <code>bioco_DEIN-DB-BENUTZER</code> (ANONYMISIERT)</li> <li>DB Pass: (Dein Datenbank-Passwort)</li> </ul> </li> <li>Schliesse die Installation ab.</li> </ul> </li> <li>Aufr\u00e4umen (Sicherheit):<ul> <li>Setze die Berechtigung des <code>public_html/site</code>-Ordners zur\u00fcck auf <code>755</code>.</li> </ul> </li> </ol>"},{"location":"technical_setup_processwire/#phase-6-abschluss-doku-matomo","title":"Phase 6: Abschluss (Doku &amp; Matomo) \ud83d\udcca","text":"<ol> <li>Matomo:<ul> <li>Installiere Matomo im Ordner <code>public_html/matomo</code>.</li> <li>Verbinde es beim Installer mit der <code>bioco_matomo</code>-Datenbank.</li> </ul> </li> <li>Doku:<ul> <li>Die Doku (<code>docs.bioco.ch</code>) ist ein separates Projekt (<code>bioco-doku</code>).</li> <li>Es wird nicht per cPanel, sondern automatisch per GitHub Actions auf GitHub Pages ver\u00f6ffentlicht.</li> <li>Im cPanel (\"Zone Editor\") wird nur ein <code>CNAME</code>-Eintrag (<code>docs</code> -&gt; <code>DEIN-GITHUB-KONTO.github.io</code>) ben\u00f6tigt.</li> </ul> </li> </ol>"}]}